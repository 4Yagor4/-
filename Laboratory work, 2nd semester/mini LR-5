import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.datasets import make_blobs, make_moons, make_circles
from sklearn.preprocessing import StandardScaler

np.random.seed(42)
algorithms = np.random.choice(range(1, 12), size=3, replace=False)
print(f"Выбранные алгоритмы (номера): {algorithms}")

selected_algorithms = [
    ('KMeans', KMeans(n_clusters=3)),
    ('DBSCAN', DBSCAN(eps=0.3, min_samples=10)),
    ('Agglomerative', AgglomerativeClustering(n_clusters=3))
]

def generate_blobs(n_samples=300):
    return make_blobs(n_samples=n_samples, centers=3, cluster_std=0.8, random_state=42)


def generate_moons(n_samples=300):
    return make_moons(n_samples=n_samples, noise=0.05, random_state=42)


def generate_circles(n_samples=300):
    return make_circles(n_samples=n_samples, factor=0.5, noise=0.05, random_state=42)


def generate_anisotropic(n_samples=300):
    X, y = make_blobs(n_samples=n_samples, centers=3, random_state=42)
    transformation = [[0.6, -0.6], [-0.4, 0.8]]
    X = np.dot(X, transformation)
    return X, y


def generate_varied_variances(n_samples=300):
    X, y = make_blobs(n_samples=n_samples,
                      centers=3,
                      cluster_std=[1.0, 2.5, 0.5],
                      random_state=42)
    return X, y


def generate_no_structure(n_samples=300):
    return np.random.rand(n_samples, 2), None


def plot_clusters(X, y, algorithm_name, dataset_name, ax):
    ax.scatter(X[:, 0], X[:, 1], c=y, s=10, cmap='viridis')
    ax.set_title(f'{algorithm_name} - {dataset_name}')
    ax.set_xticks([])
    ax.set_yticks([])

datasets = [
    ('Blobs', generate_blobs()),
    ('Moons', generate_moons()),
    ('Circles', generate_circles()),
    ('Anisotropic', generate_anisotropic()),
    ('Varied Variances', generate_varied_variances()),
    ('No Structure', generate_no_structure())
]

plt.figure(figsize=(18, 12))
plt.subplots_adjust(hspace=0.3, wspace=0.1)

for i, (dataset_name, (X, y_true)) in enumerate(datasets):

    X = StandardScaler().fit_transform(X)

    for j, (algorithm_name, algorithm) in enumerate(selected_algorithms):
        ax = plt.subplot(len(datasets), len(selected_algorithms),
                         i * len(selected_algorithms) + j + 1)


        if algorithm_name == 'DBSCAN' and dataset_name == 'No Structure':
            algorithm.set_params(eps=0.5)

        y_pred = algorithm.fit_predict(X)

        plot_clusters(X, y_pred, algorithm_name, dataset_name, ax)

plt.suptitle('Сравнение алгоритмов кластеризации на разных типах данных', y=0.99)
plt.show()

print("\nАнализ результатов:")
print("1. KMeans хорошо работает с выпуклыми кластерами (Blobs, Varied Variances),")
print("   но плохо справляется с невыпуклыми формами (Moons, Circles).")
print("2. DBSCAN хорошо обнаруживает кластеры произвольной формы (Moons, Circles),")
print("   но чувствителен к параметрам и плохо работает с разномасштабными кластерами.")
print("3. AgglomerativeClustering показывает средние результаты на всех типах данных,")
print("   но требует задания числа кластеров и также плохо работает с невыпуклыми формами.")

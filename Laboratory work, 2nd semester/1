import random
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter


def create_random_points(x_min, x_max, y_min, y_max, count, label):
    x = [[random.uniform(x_min, x_max), random.uniform(y_min, y_max)] for _ in range(count)]
    y = [label] * count
    return x, y


def split_data(x, y, p=0.8):
    data = list(zip(x, y))
    random.shuffle(data)
    train_size = int(len(data) * p)
    train_data, test_data = data[:train_size], data[train_size:]
    x_train, y_train = zip(*train_data)
    x_test, y_test = zip(*test_data)
    return list(x_train), list(x_test), list(y_train), list(y_test)


def calculate_distance(p1, p2):
    return np.sqrt(sum((np.array(p1) - np.array(p2)) ** 2))


def predict_labels(x_train, y_train, x_test, k=3):
    y_predict = []
    for test_point in x_test:
        distances = [(calculate_distance(test_point, train_point), label) for train_point, label in
                     zip(x_train, y_train)]
        distances.sort(key=lambda x: x[0])
        k_nearest = [label for _, label in distances[:k]]
        most_common = Counter(k_nearest).most_common(1)[0][0]
        y_predict.append(most_common)
    return y_predict


def get_accuracy(y_test, y_predict):
    return sum(1 for yt, yp in zip(y_test, y_predict) if yt == yp) / len(y_test)


def plot_results(x_train, y_train, x_test, y_test, y_predict):
    plt.figure(figsize=(8, 6))

    for point, label in zip(x_train, y_train):
        plt.scatter(*point, c='blue', marker='o' if label == 0 else 'x',
                    label='Train' if 'Train' not in plt.gca().get_legend_handles_labels()[1] else "")
    for point, label, pred in zip(x_test, y_test, y_predict):
        color = 'green' if label == pred else 'red'
        marker = 'o' if label == 0 else 'x'
        plt.scatter(*point, c=color, marker=marker)
    plt.legend()
    plt.show()



x_min1, x_max1, y_min1, y_max1 = 2, 7, 2, 7
x_min2, x_max2, y_min2, y_max2 = 4, 9, 4, 9
points_count1, points_count2 = 50, 50


x1, y1 = create_random_points(x_min1, x_max1, y_min1, y_max1, points_count1, 0)
x2, y2 = create_random_points(x_min2, x_max2, y_min2, y_max2, points_count2, 1)
x, y = x1 + x2, y1 + y2


x_train, x_test, y_train, y_test = split_data(x, y, p=0.8)


y_predict = predict_labels(x_train, y_train, x_test, k=3)


accuracy = get_accuracy(y_test, y_predict)
print(f"Accuracy: {accuracy:.2f}")


plot_results(x_train, y_train, x_test, y_test, y_predict)

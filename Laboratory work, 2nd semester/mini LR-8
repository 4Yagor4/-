import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.kernel_ridge import KernelRidge
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

def f(x):
    return x * np.sin(x) + 0.5 * x

np.random.seed(42)
random.seed(42)
x_min, x_max = 0, 10
n_points = 100

x = np.linspace(x_min, x_max, n_points)
e = np.array([random.uniform(-1, 1) for _ in range(n_points)])
y = f(x) + e
x_reshaped = x.reshape(-1, 1)

# Kernel Ridge Regression
kr = KernelRidge(kernel='rbf', alpha=0.1, gamma=0.1)
kr.fit(x_reshaped, y)
y_kr = kr.predict(x_reshaped)
mse_kr = mean_squared_error(y, y_kr)

svr = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1)
svr.fit(x_reshaped, y)
y_svr = svr.predict(x_reshaped)
mse_svr = mean_squared_error(y, y_svr)

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(x_reshaped, y)
y_rf = rf.predict(x_reshaped)
mse_rf = mean_squared_error(y, y_rf)

plt.figure(figsize=(18, 5))

y_true = f(x)

plt.subplot(1, 3, 1)
plt.scatter(x, y, color='blue', s=10, label='Исходные точки')
plt.plot(x, y_true, color='green', linewidth=2, label='Исходная функция')
plt.plot(x, y_kr, color='red', linewidth=2, label='Kernel Ridge')
plt.title(f'Kernel Ridge Regression\nMSE: {mse_kr:.4f}')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()

plt.subplot(1, 3, 2)
plt.scatter(x, y, color='blue', s=10)
plt.plot(x, y_true, color='green', linewidth=2)
plt.plot(x, y_svr, color='red', linewidth=2, label='SVR')
plt.title(f'Support Vector Regression\nMSE: {mse_svr:.4f}')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()

plt.subplot(1, 3, 3)
plt.scatter(x, y, color='blue', s=10)
plt.plot(x, y_true, color='green', linewidth=2)
plt.plot(x, y_rf, color='red', linewidth=2, label='Random Forest')
plt.title(f'Random Forest Regression\nMSE: {mse_rf:.4f}')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()

plt.tight_layout()
plt.show()

print("Результаты регрессии:")
print(f"1. Kernel Ridge MSE: {mse_kr:.4f}")
print(f"2. SVR MSE: {mse_svr:.4f}")
print(f"3. Random Forest MSE: {mse_rf:.4f}")

print("\nВывод:")
print("Наилучшие результаты показывает Support Vector Regression (SVR), так как она")
print("наиболее точно аппроксимирует исходную функцию с наименьшей MSE.")
print("Kernel Ridge также показывает хорошие результаты, в то время как Random Forest")
print("дает менее точную аппроксимацию из-за ступенчатой природы деревьев решений.")
